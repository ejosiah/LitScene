#version 450 core
#pragma debug(on)
#pragma optimize(off)

layout(local_size_x = 32, local_size_y = 32) in;

struct Plane{
	vec3 n;
	float d;
};

struct Triangle{
	int tid;
	Plane p;
	Plane bc;
	Plane ca;
};

struct Ray { vec3 origin, dir;} eyeRay;
struct Box { vec3 min, max; };
struct Camera{
	vec3 U, V, W;
	float d;
} cam;

layout(std430, binding=0) buffer TRIANGLES {
	Triangle triangles[];
};

uniform mat4 invMVP;
uniform vec4 bgColor;
uniform vec3 eyes;
uniform vec3 lightPos;
uniform Box aabb;
uniform float NO_OF_TRIANGLES;
uniform float NO_OF_VERTICES;

layout(rgba32f, binding=0) uniform image2D scene_img;
layout(binding=1) uniform samplerBuffer vertices_tbo;
layout(binding=2) uniform isamplerBuffer triangle_tbo;
layout(binding=3) uniform sampler2DArray textureMap;

const float k0 = 1.0;
const float k1 = 0.0;
const float k2 = 0.0;
const vec4 NO_HIT = vec4(-1, 0, 0, 0);

vec2 getUV(){
	vec2 uv = vec2(gl_GlobalInvocationID.xy)/(vec2(gl_NumWorkGroups.xy * gl_WorkGroupSize.xy) - vec2(1));
	return 2 * uv - vec2(1);	// scale from [0, 1] to [-1, -]
}

vec2 intersectCube(vec3 origin, vec3 ray, Box cube) {
	vec3   tMin = (cube.min - origin) / ray;
	vec3   tMax = (cube.max - origin) / ray;
	vec3     t1 = min(tMin, tMax);
	vec3     t2 = max(tMin, tMax);
	float tNear = max(max(t1.x, t1.y), t1.z);
	float  tFar = min(min(t2.x, t2.y), t2.z);
	return vec2(tNear, tFar);
}

vec3 get_direction(vec2 p, Camera c) {
   return normalize(p.x * c.U + p.y * c.V + c.d * c.W);
}

void setup_camera(vec2 uv) {

  eyeRay.origin = eyes;

  cam.U = (invMVP*vec4(1,0,0,0)).xyz;
  cam.V = (invMVP*vec4(0,1,0,0)).xyz;
  cam.W = (invMVP*vec4(0,0,1,0)).xyz;
  cam.d = 1;

  eyeRay.dir = get_direction(uv , cam);
  eyeRay.dir += cam.U*uv.x;
  eyeRay.dir += cam.V*uv.y;
}


vec4 intersectTriangle(vec3 origin, vec3 dir, int index,  out vec3 normal ) {
	Triangle tri = triangles[index];

	vec3 q = origin + dir;

	float distp = dot(origin, tri.p.n) - tri.p.d;
	if(distp < 0) return NO_HIT;

	float distq = dot(q, tri.p.n) - tri.p.d;
	if(distq >= 0) return NO_HIT;

	float denom = distp - distq;
	float t = distp / denom;
	vec3 s = origin + t * dir;

	float w = dot(s, tri.bc.n) - tri.bc.d;
	if( w < 0 || w > 1.0) return NO_HIT;

	float u = dot(s, tri.ca.n) - tri.ca.d;
	if(u < 0) return NO_HIT;

	float v = 1.0 - w - u;
	if(v < 0.0) return NO_HIT;

	normal = tri.p.n;
	float i = tri.tid;
	return vec4(t,w,v, i);
}

float shadow(vec3 origin, vec3 dir ) {
	vec3 tmp;
	for(int i=0;i<int(NO_OF_TRIANGLES);i++)
	{
		vec4 res = intersectTriangle(origin, dir, i, tmp);
		if(res.x>0 ) {
		   return 0.5;
		}
	}
	return 1.0;
}

void main()
{
	triangles[NO_OF_TRIANGLES];
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    imageStore(scene_img, pos, bgColor);
	
	float t = 10000;
	
	vec2 uv = getUV();
	setup_camera(uv);

	vec2 tNearFar = intersectCube(eyeRay.origin, eyeRay.dir,  aabb);

	if(tNearFar.x<tNearFar.y  ) {

		t = tNearFar.y+1; //offset the near intersection to remove the depth artifacts

		vec4 val=vec4(t,0,0,0);
		vec3 N;
		
		for(int i=0;i<int(NO_OF_TRIANGLES);i++)
		{
			vec3 normal;
			vec4 res = intersectTriangle(eyeRay.origin, eyeRay.dir, i, normal);
		 	if(res.x>0 && res.x <= val.x) {
			   val = res;
			   N = normal;
		    }
		}

		
		if(val.x < t) {

			vec3 hit = eyeRay.origin + eyeRay.dir*val.x;

			vec3 L = (lightPos-hit);
			float d = length(L);
			L = normalize(L);

			float diffuse = max(0, dot(N, L));

			float attenuationAmount = 1.0/(k0 + (k1*d) + (k2*d*d));
			diffuse *= attenuationAmount;

			float inShadow = shadow(hit+ N*0.0001, L) ;
			vec4 color = inShadow*diffuse*mix(texture(textureMap, val.yzw), vec4(1), (val.w==255) );
         //   imageStore(scene_img, pos, color);
		 imageStore(scene_img, pos, vec4(triangles[0].p.n, 1));
		}
	}
	
}

